#cloud-config
# vim: syntax=yaml
# created: Jan/18/2024 14:04:23 -08
# values surrounded by !!@ @!! need to be replaced by powershell variables of the same name

hostname: eflow10
fqdn: eflow10.home.lan
# prefer_fqdn_over_hostname: true

# cloud-init Bug 21.4.1: locale update prepends "LANG=" like in
# /etc/defaults/locale set and results into error
#locale: $Locale
timezone: Etc/GMT+8

growpart:
  mode: auto
  devices: [/]
  ignore_growroot_disabled: false

preserve_sources_list: true
package_update: true
package_upgrade: true
package_reboot_if_required: true

packages:
  - eject
  - console-setup
  - keyboard-configuration
  - docker.io
  - docker-compose
  - linux-tools-virtual
  - linux-cloud-tools-virtual
  - linux-azure

# https://learn.microsoft.com/en-us/azure/virtual-machines/linux/cloudinit-add-user#add-a-user-to-a-vm-with-cloud-init

users:
  - default
  - name: luke
    no_user_group: true
    groups: [sudo]
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    lock_passwd: false
    plain_text_passwd: derp77
    lock_passwd: false
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJIFojWQgEyg1bfyn4ncMDGTBAcumQcPkOvIBqTAqKVQ luke@GS-RXLar

disable_root: true    # true: notify default user account / false: allow root ssh login
ssh_pwauth: true      # true: allow login with password; else only with setup pubkey(s)

runcmd:
  # remove metadata iso
  - 'sh -c "if test -b /dev/cdrom; then eject; fi"'
  - 'sh -c "if test -b /dev/sr0; then eject /dev/sr0; fi"'
  # disable cloud init on next boot (https://cloudinit.readthedocs.io/en/latest/topics/boot.html, https://askubuntu.com/a/1047618)
  - 'sh -c touch /etc/cloud/cloud-init.disabled'
  - 'echo "vm.max_map_count=262144" | sudo tee -a /etc/sysctl.conf sudo sysctl -p'
  - 'mkdir /opt/elastiflow/elastiflow'
  - 'mkdir /opt/elastiflow/elastiflow/maxmind'
  - 'mkdir /opt/elastiflow/nginx'
  - 'mkdir /opt/elastiflow/certs'
  # set locale
  # cloud-init Bug 21.4.1: locale update prepends "LANG=" like in
  # /etc/defaults/locale set and results into error
  - 'locale-gen "en_US.UTF-8"'
  - 'update-locale "en_US.UTF-8"'
  # - 'docker-compose -f /opt/elastiflow/docker-compose.yml up -d'
  # Start elastiflow only after cloud-init is complete
  - 'systemctl enable docker-bootstrap.service'
  - 'systemctl start docker-bootstrap.service'
write_files:
  - content: |
      version: '3'
      services:
        dashboards-import:
          build:
            context: .
            dockerfile: dashboards.py.dockerfile
          volumes:
            - ./elastiflow:/elastiflow
          networks:
            - opensearch-net
          depends_on:
            - dashboard # needs a health check
        ssl-generator:
          build:
            context: .
            dockerfile: openssl.dockerfile
          environment:
            DAYS: 365
            SUBJECT: "/C=CA/ST=BC/L=TheCloud/O=SelfSignedCert/OU=IT/CN=elastiflow.local"
          volumes:
            - ./certs:/openssl-certs
        nginx:
          image: nginx
          ports:
            - "80:80"
            - "443:443"
          volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./certs:/etc/nginx/ssl
            - ./nginx/html:/etc/nginx/html
            - ./nginx/.htpasswd:/etc/nginx/.htpasswd
          networks:
            - opensearch-net
        opensearch:
          image: opensearchproject/opensearch:latest
          environment:
            - cluster.name=opensearch-cluster
            - node.name=os1
            - discovery.type=single-node
            - bootstrap.memory_lock=true
            - "OPENSEARCH_JAVA_OPTS=-Xms1024m -Xmx1024m" # Set min and max JVM heap sizes to at least 50% of system RAM
            - "DISABLE_INSTALL_DEMO_CONFIG=true"
            - "DISABLE_SECURITY_PLUGIN=true"
          ulimits:
            memlock:
              soft: -1 # Set memlock to unlimited (no soft or hard limit)
              hard: -1
            nofile:
              soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
              hard: 65536
          volumes:
            - opensearch-data:/usr/share/opensearch/data
          ports:
            - 127.0.0.1:9200:9200 # REST API
            - 127.0.0.1:9600:9600 # Performance Analyzer
          networks:
            - opensearch-net
        dashboard:
          image: opensearchproject/opensearch-dashboards:latest
          ports:
            - 127.0.0.1:5601:5601
          expose:
            - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
          environment:
            - 'OPENSEARCH_HOSTS="http://opensearch:9200"'
            - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
            - 'SERVER_BASEPATH="/a"'
            - 'SERVER_REWRITEBASEPATH=true'
            - 'SERVER_MAXPAYLOADBYTES=10485760'
          networks:
            - opensearch-net
        flow-collector:
          image: elastiflow/flow-collector:6.4.2
          container_name: flow-collector
          restart: 'unless-stopped'
          network_mode: 'host'
          volumes:
            - ./elastiflow:/etc/elastiflow
          environment:
            EF_LICENSE_ACCEPTED: 'true'
            EF_FLOW_SERVER_UDP_IP: '0.0.0.0'
            EF_FLOW_SERVER_UDP_PORT: 9995
            EF_OUTPUT_OPENSEARCH_ENABLE: 'true'
            EF_OUTPUT_OPENSEARCH_ECS_ENABLE: 'true'
            EF_OUTPUT_OPENSEARCH_TIMESTAMP_SOURCE: 'collect'
            EF_OUTPUT_OPENSEARCH_INDEX_PERIOD: 'daily'
            EF_OUTPUT_OPENSEARCH_INDEX_PREFIX: 'elastiflow'
            EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_SHARDS: 1
            EF_OUTPUT_OPENSEARCH_INDEX_TEMPLATE_REPLICAS: 0
            EF_OUTPUT_OPENSEARCH_ADDRESSES: '127.0.0.1:9200'
            EF_OUTPUT_OPENSEARCH_USERNAME: 'admin'
            EF_OUTPUT_OPENSEARCH_PASSWORD: 'admin'
            EF_PROCESSOR_ENRICH_APP_ID_ENABLE: 'false'
            EF_PROCESSOR_ENRICH_APP_IPPORT_ENABLE: 'false'
            EF_PROCESSOR_ENRICH_IPADDR_METADATA_ENABLE: 'false'
            EF_PROCESSOR_ENRICH_IPADDR_DNS_ENABLE: 'true'
            EF_PROCESSOR_ENRICH_IPADDR_DNS_NAMESERVER_IP: '10.2.2.1'
            EF_PROCESSOR_ENRICH_IPADDR_DNS_NAMESERVER_TIMEOUT: 3000
            EF_PROCESSOR_ENRICH_IPADDR_DNS_RESOLVE_PRIVATE: 'true'
            EF_PROCESSOR_ENRICH_IPADDR_DNS_RESOLVE_PUBLIC: 'true'
            EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_ENABLE: 'true'
            EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_PATH: '/etc/elastiflow/maxmind/GeoLite2-ASN.mmdb'
            EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_ENABLE: 'true'
            EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_PATH: '/etc/elastiflow/maxmind/GeoLite2-City.mmdb'
            EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_VALUES: 'city,country,country_code,location,timezone'
            EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_LANG: 'en'
            EF_PROCESSOR_ENRICH_IPADDR_RISKIQ_THREAT_ENABLE: 'false'
            EF_PROCESSOR_ENRICH_NETIF_METADATA_ENABLE: 'false'
            EF_PROCESSOR_ENRICH_NETIF_FLOW_OPTIONS_ENABLE: 'true'
            EF_PROCESSOR_ENRICH_NETIF_SNMP_ENABLE: 'false'
            EF_PROCESSOR_ENRICH_NETIF_SNMP_COMMUNITIES: 'public'
        geoipupdate:
          container_name: geoipupdate
          image: ghcr.io/maxmind/geoipupdate
          restart: unless-stopped
          environment:
            - 'GEOIPUPDATE_ACCOUNT_ID=154796'
            - 'GEOIPUPDATE_LICENSE_KEY=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'
            - 'GEOIPUPDATE_EDITION_IDS=GeoLite2-ASN GeoLite2-City GeoLite2-Country'
            - GEOIPUPDATE_FREQUENCY=72
          networks:
            - opensearch-net
          volumes:
            - ./elastiflow/maxmind:/usr/share/GeoIP
      volumes:
        opensearch-data:
      networks:
        opensearch-net:
    path: /opt/elastiflow/docker-compose.yml
  - content: |
      FROM alpine:latest
      RUN apk update && \
          apk add --no-cache openssl && \
          rm -rf "/var/cache/apk/*"
      WORKDIR /app
      RUN mkdir /openssl-certs
      ENV CERT_FILENAME=server.crt
      ENV KEY_FILENAME=server.key
      ENV DAYS=365
      RUN echo 'if [ ! -e /openssl-certs/$KEY_FILENAME ] || [ ! -e /openssl-certs/$CERT_FILENAME ]; then \
          echo "Generating SSL certificates"; \
          openssl genpkey -algorithm RSA -out /openssl-certs/$KEY_FILENAME && \
          openssl req -new -x509 -key /openssl-certs/$KEY_FILENAME -out /openssl-certs/$CERT_FILENAME -days $DAYS -subj "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=example.com"; \
          echo $CERT_FILENAME; \
          echo $KEY_FILENAME; \
      fi' > /app/run.sh
      RUN chmod +x /app/run.sh
      CMD /app/run.sh
    path: /opt/elastiflow/openssl.dockerfile
  - content: |
      FROM python:3.8
      WORKDIR /app
      RUN pip install requests
      RUN echo '# script\n\
      import requests\n\
      import os\n\
      import time\n\
      dashboard_url = "https://raw.githubusercontent.com/elastiflow/elastiflow_for_opensearch/main/dashboards/flow/dashboards-2.0.x-flow-ecs.ndjson"\n\
      dashboard_file  = "/app/dashboards-2.0.x-flow-ecs.ndjson"\n\
      dashboard_file2 = "/elastiflow/advancedSettings.ndjson"\n\
      api_url = "http://admin:admin@dashboard:5601/a/api/saved_objects/_import?overwrite=true"\n\
      headers = {\n\
          "osd-xsrf": "true",\n\
          "securitytenant": "global"\n\
      }\n\
      max_retries = 10\n\
      retry_count = 0\n\
      print(f"Download dashboards")\n\
      while retry_count < max_retries:\n\
          print(f"Attempt ", retry_count)\n\
          retry_count += 1\n\
          response = requests.get(dashboard_url)\n\
          print(f"Response code: ", response.status_code)\n\
          if response.status_code == 200:\n\
              with open(dashboard_file, "w") as file:\n\
                  file.write(response.text)\n\
              break\n\
          else:\n\
              print(f"Failed to download dashboard file. HTTP Status Code: {response.status_code}")\n\
              time.sleep(5)  # Wait for 5 seconds before retrying\n\
      if retry_count == max_retries:\n\
          print("Maximum retry attempts reached. Exiting.")\n\
          os.exit()\n\
      retry_count = 0\n\
      print(f"Upload to API")\n\
      while retry_count < max_retries:\n\
          print(f"Attempt")\n\
          try:\n\
              response = requests.post(api_url, files={"file": open(dashboard_file, "rb")}, headers=headers)\n\
              status_code = response.status_code\n\
              if status_code == 200:\n\
                  print("Dashboard file successfully posted to the API.")\n\
                  break\n\
              else:\n\
                  print(f"Failed to post to the API. HTTP Status Code: {status_code}. Retrying...")\n\
                  retry_count += 1\n\
                  time.sleep(10)  # Wait for 5 seconds before retrying\n\
          except Exception as e:\n\
              print(f"An error occurred: {e}. Retrying...")\n\
              retry_count += 1\n\
              time.sleep(5)  # Wait for 5 seconds before retrying\n\
      time.sleep(2)\n\
      response = requests.post(api_url, files={"file": open(dashboard_file2, "rb")}, headers=headers)\n\
      if retry_count == max_retries:\n\
          print("Maximum retry attempts reached. Exiting.")\n\
          os.exit()\n\
      ' > /app/script.py
      CMD ["python", "-u", "/app/script.py"]
    path: /opt/elastiflow/dashboards.py.dockerfile
  - content: |
      worker_processes 1;
      events {
          worker_connections 1024;
      }
      http {
          include /etc/nginx/mime.types;
          default_type application/octet-stream;
          sendfile on;
          keepalive_timeout 65;
          server {
              listen 80;
              server_name yourdomain.com;
              return 301 https://$host$request_uri;
          }
          server {
              listen 443 ssl;
              server_name localhost;
              ssl_certificate /etc/nginx/ssl/server.crt;
              ssl_certificate_key /etc/nginx/ssl/server.key;
              location / {
                  return 302 /a;
              }
              location /a {
                  auth_basic "Login";
                  auth_basic_user_file /etc/nginx/.htpasswd;
                  proxy_pass http://dashboard:5601;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }
      }
    path: /opt/elastiflow/nginx/nginx.conf
  - content: |
      luke:$2a$11$QR/9tBlB3ksIPN7VvoMg4OhC857IhFG5z7ILm2wlIPg9pmHjHbsyy
    path: /opt/elastiflow/nginx/.htpasswd
  - content: |
      #!/bin/bash
      # This example script parses /etc/resolv.conf to retrive DNS information.
      # In the interest of keeping the KVP daemon code free of distro specific
      # information; the kvp daemon code invokes this external script to gather
      # DNS information.
      # This script is expected to print the nameserver values to stdout.
      # Each Distro is expected to implement this script in a distro specific
      # fashion. For instance on Distros that ship with Network Manager enabled,
      # this script can be based on the Network Manager APIs for retrieving DNS
      # entries.
      cat /etc/resolv.conf 2>/dev/null | awk '/^nameserver/ { print $2 }'
    path: /usr/libexec/hypervkvpd/hv_get_dns_info
  - content: |
      #!/bin/bash
      # SPDX-License-Identifier: GPL-2.0
      # This example script retrieves the DHCP state of a given interface.
      # In the interest of keeping the KVP daemon code free of distro specific
      # information; the kvp daemon code invokes this external script to gather
      # DHCP setting for the specific interface.
      #
      # Input: Name of the interface
      #
      # Output: The script prints the string "Enabled" to stdout to indicate
      #	that DHCP is enabled on the interface. If DHCP is not enabled,
      #	the script prints the string "Disabled" to stdout.
      #
      # Each Distro is expected to implement this script in a distro specific
      # fashion. For instance, on Distros that ship with Network Manager enabled,
      # this script can be based on the Network Manager APIs for retrieving DHCP
      # information.
      # RedHat based systems
      #if_file="/etc/sysconfig/network-scripts/ifcfg-"$1
      # Debian based systems
      if_file=`"/etc/network/interrfaces.d/*`"
      dhcp=`$(grep `"dhcp`" `$if_file 2>/dev/null)
      if [ "$dhcp" != "" ];
      then
      echo "Enabled"
      else
      echo "Disabled"
      fi
    path: /usr/libexec/hypervkvpd/hv_get_dhcp_info
  - content: |
      {"attributes":{"buildNum":6867,"defaultIndex":"elastiflow-flow-ecs-*","defaultRoute":"/app/dashboards#/view/4a608bc0-3d3e-11eb-bc2c-c5758316d788?_g=(filters:!(),refreshInterval:(pause:!t,value:0),time:(from:now-15m,to:now))&_a=(description:'',filters:!(),fullScreenMode:!f,options:(hidePanelTitles:!f,useMargins:!f),query:(language:kuery,query:''),timeRestore:!f,title:'ElastiFlow%20(flow):%20Overview',viewMode:view)","doc_table:highlight":false,"filters:pinnedByDefault":true,"format:number:defaultPattern":"0,0.[00]","format:percent:defaultPattern":"0,0.[00]%","state:storeInSessionStorage":true,"theme:darkMode":true,"timepicker:quickRanges":"[\r\n  {\r\n    \"from\": \"now-15m/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 15 minutes\"\r\n  },\r\n  {\r\n    \"from\": \"now-30m/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 30 minutes\"\r\n  },\r\n  {\r\n    \"from\": \"now-1h/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 1 hour\"\r\n  },\r\n  {\r\n    \"from\": \"now-2h/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 2 hours\"\r\n  },\r\n  {\r\n    \"from\": \"now-4h/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 4 hours\"\r\n  },\r\n  {\r\n    \"from\": \"now-12h/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 12 hours\"\r\n  },\r\n  {\r\n    \"from\": \"now-24h/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 24 hours\"\r\n  },\r\n  {\r\n    \"from\": \"now-48h/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 48 hours\"\r\n  },\r\n  {\r\n    \"from\": \"now-7d/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 7 days\"\r\n  },\r\n  {\r\n    \"from\": \"now-30d/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 30 days\"\r\n  },\r\n  {\r\n    \"from\": \"now-60d/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 60 days\"\r\n  },\r\n  {\r\n    \"from\": \"now-90d/m\",\r\n    \"to\": \"now/m\",\r\n    \"display\": \"Last 90 days\"\r\n  }\r\n]","timepicker:timeDefaults":"{\r\n  \"from\": \"now-1h/m\",\r\n  \"to\": \"now\"\r\n}"},"id":"2.11.1","migrationVersion":{"config":"7.9.0"},"references":[],"type":"config","updated_at":"2024-01-13T00:32:11.594Z","version":"WzQxMyw3XQ=="}
      {"exportedCount":1,"missingRefCount":0,"missingReferences":[]}
    path: /opt/elastiflow/elastiflow/advancedSettings.ndjson
  - content: |
      \v
      \s \r \m

      \d \t

      \n :: \4{eth0}
      _
    path: /etc/issue
  - content: |
      [Unit]
      Description=Docker Bootstrapper Service
      After=network.target

      [Service]
      Type=simple
      User=root
      WorkingDirectory=/opt/elastiflow
      ExecStartPre=/bin/bash -c 'while [ ! -f /var/lib/cloud/instance/boot-finished ]; do sleep 5; done'
      ExecStart=docker-compose up -d

      [Install]
      WantedBy=default.target
    path: /etc/systemd/system/docker-bootstrap.service
  - content: |
      {
        "userland-proxy": false
      }
    path: /etc/docker/daemon.json
mount_default_fields: [ None, None, "auto", "defaults,nofail", "0", "2" ]
# 

# Additional mounts not  finished yet. Need to add formatting / partitioning, and configure for docker

manage_etc_hosts: true
manage_resolv_conf: true

resolv_conf:
  nameservers: ['10.2.2.1']
  searchdomains:
    - home.lan
  domain: home.lan

power_state:
  mode: reboot
  message: Provisioning finished, will reboot ...
  timeout: 15
